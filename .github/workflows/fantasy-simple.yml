name: Fantasy Football AI (Simple)

on:
  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'lineup'
        type: choice
        options:
        - lineup
        - waivers
        - analysis
        - all

jobs:
  fantasy-manager:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Find and setup MCP server
      run: |
        echo "üîç Locating MCP server files..."
        
        # Check multiple possible locations
        if [ -f "package.json" ] && [ -f "tsconfig.json" ]; then
          echo "‚úÖ Found MCP server in root directory"
          MCP_DIR="."
        elif [ -f "fantasy-poc/mcp-server/package.json" ] && [ -f "fantasy-poc/mcp-server/tsconfig.json" ]; then
          echo "‚úÖ Found MCP server in fantasy-poc/mcp-server"
          MCP_DIR="fantasy-poc/mcp-server"
        elif [ -f "src/index.ts" ]; then
          echo "‚úÖ Found source files, using root directory"
          MCP_DIR="."
        else
          echo "‚ùå Could not find MCP server files"
          find . -name "package.json" -type f | head -5
          exit 1
        fi
        
        echo "MCP_DIR=$MCP_DIR" >> $GITHUB_ENV
        echo "üìç Using MCP directory: $MCP_DIR"
        
    - name: Install dependencies and build
      run: |
        cd "$MCP_DIR"
        echo "üì¶ Installing dependencies in $PWD"
        npm ci || npm install
        
        echo "üî® Building project..."
        npm run build
        
        echo "‚úÖ Verifying build output..."
        if [ ! -f "dist/index.js" ]; then
          echo "‚ùå Build failed - no dist/index.js found"
          ls -la dist/ || echo "No dist directory"
          exit 1
        fi
        echo "‚úÖ Build successful"
      
    - name: Set current week
      id: week
      run: |
        # Calculate NFL week
        SEASON_START="2025-09-04"
        CURRENT_DATE=$(date +%Y-%m-%d)
        DAYS_DIFF=$(( ($(date -d "$CURRENT_DATE" +%s) - $(date -d "$SEASON_START" +%s)) / 86400 ))
        
        if [ $DAYS_DIFF -le 0 ]; then
          WEEK=1
        else
          WEEK=$(( (DAYS_DIFF / 7) + 1 ))
          if [ $WEEK -gt 18 ]; then
            WEEK=18
          fi
        fi
        
        echo "week=$WEEK" >> $GITHUB_OUTPUT
        echo "Current NFL Week: $WEEK"
    
    - name: AI Fantasy Analysis
      env:
        ESPN_S2: ${{ secrets.ESPN_S2 }}
        ESPN_SWID: ${{ secrets.ESPN_SWID }}
        LEAGUE_ID_1: ${{ secrets.LEAGUE_1_ID }}
        TEAM_ID_1: ${{ secrets.LEAGUE_1_TEAM_ID }}
        LEAGUE_ID_2: ${{ secrets.LEAGUE_2_ID }}
        TEAM_ID_2: ${{ secrets.LEAGUE_2_TEAM_ID }}
        CURRENT_WEEK: ${{ steps.week.outputs.week }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      run: |
        cd "$MCP_DIR"
        echo "ü§ñ Phase 4 AI Fantasy Analysis - Week $CURRENT_WEEK"
        
        # Test basic AI workflow
        echo '{"jsonrpc":"2.0","method":"tools/call","params":{"name":"execute_ai_workflow","arguments":{"task":"thursday_optimization","leagues":[{"leagueId":"'$LEAGUE_ID_1'","teamId":"'$TEAM_ID_1'"}],"week":'$CURRENT_WEEK',"prompt":"Test AI analysis with Gemini 2.5"}},"id":1}' | timeout 60 node dist/index.js > test_result.json || echo "AI workflow test completed with timeout"
        
        # Show results
        if [ -f "test_result.json" ]; then
          echo "‚úÖ AI analysis completed"
          echo "üìã Result preview:"
          head -n 5 test_result.json || echo "Could not preview result"
        else
          echo "‚ö†Ô∏è No result file generated"
        fi
        
        echo "‚úÖ Analysis complete"
    
    - name: Send Discord Notification
      if: always()
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        WEEK: ${{ steps.week.outputs.week }}
        STATUS: ${{ job.status }}
      run: |
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          EMOJI="‚úÖ"
          COLOR="3066993"
          if [ "$STATUS" != "success" ]; then
            EMOJI="‚ùå"
            COLOR="15158332"
          fi
          
          MESSAGE="{\"embeds\":[{\"title\":\"$EMOJI Fantasy Football AI Test\",\"description\":\"**Phase 4 AI System Test** - Week $WEEK\\n\\nGemini 2.5 AI analysis completed\",\"color\":$COLOR,\"fields\":[{\"name\":\"üìà Status\",\"value\":\"$STATUS\",\"inline\":true},{\"name\":\"üèà Week\",\"value\":\"$WEEK\",\"inline\":true}],\"footer\":{\"text\":\"Phase 4 AI Test Run\"},\"timestamp\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}]}"
          
          curl -H "Content-Type: application/json" -d "$MESSAGE" "$DISCORD_WEBHOOK_URL"
          echo "‚úÖ Discord notification sent"
        else
          echo "‚ö†Ô∏è No Discord webhook configured"
        fi
    
    - name: Upload Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: fantasy-test-results-${{ github.run_number }}
        path: |
          ${{ env.MCP_DIR }}/*.json
          *.json
        retention-days: 7
