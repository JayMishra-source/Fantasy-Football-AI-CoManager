name: Fantasy Football Production Automation

on:
  schedule:
    # Thursday 6PM ET - Pre-game lineup optimization
    - cron: '0 23 * * 4'
    # Sunday 11AM ET - Final lineup check
    - cron: '0 16 * * 0'
    # Monday 6PM ET - Post-game analysis and waiver prep
    - cron: '0 23 * * 1'
    # Tuesday 3AM ET - Waiver wire processing
    - cron: '0 8 * * 2'
    # Daily health check at 8AM ET
    - cron: '0 13 * * *'
  
  # Manual trigger for testing and emergency runs
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'thursday'
        type: choice
        options:
        - thursday
        - sunday
        - monday
        - tuesday
        - health-check
        - test-espn
        - test-llm
        - roster
        - cost
        - dry-run
      
      dry_run:
        description: 'Enable dry run mode (no actual changes)'
        required: false
        type: boolean
        default: false
      
      debug:
        description: 'Enable debug logging'
        required: false
        type: boolean
        default: false

env:
  NODE_ENV: production
  ENABLE_DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
  DEBUG_MODE: ${{ github.event.inputs.debug || 'false' }}

jobs:
  # Pre-flight checks
  preflight:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_continue: ${{ steps.checks.outputs.continue }}
      test_results: ${{ steps.integration_tests.outputs.results }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'fantasy-poc/automation/package.json'
    
    - name: Install dependencies and build
      run: |
        cd fantasy-poc/shared
        npm ci --production
        npm run build
        
        cd ../automation
        npm ci --production
        npm run build
    
    - name: Environment validation
      id: env_check
      env:
        ESPN_S2: ${{ secrets.ESPN_S2 }}
        ESPN_SWID: ${{ secrets.ESPN_SWID }}
        LEAGUE_1_ID: ${{ secrets.LEAGUE_1_ID }}
        LEAGUE_1_TEAM_ID: ${{ secrets.LEAGUE_1_TEAM_ID }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        PRIMARY_LLM_PROVIDER: 'gemini'
        ENABLE_PERFORMANCE_TRACKING: 'true'
        ENABLE_AB_TESTING: 'true'
        SCHEDULE_ENABLED: 'true'
        TIMEZONE: 'America/New_York'
      run: |
        cd fantasy-poc/automation
        echo "üîç Validating production environment..."
        
        # Check required secrets
        if [ -z "$ESPN_S2" ] || [ -z "$ESPN_SWID" ]; then
          echo "‚ùå ESPN authentication secrets missing"
          echo "continue=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        if [ -z "$LEAGUE_1_ID" ] || [ -z "$LEAGUE_1_TEAM_ID" ]; then
          echo "‚ùå League configuration missing"
          echo "continue=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        if [ -z "$GEMINI_API_KEY" ]; then
          echo "‚ùå LLM API key missing"
          echo "continue=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        echo "‚úÖ Environment validation passed"
        echo "continue=true" >> $GITHUB_OUTPUT
    
    - name: Integration tests
      id: integration_tests
      if: steps.env_check.outputs.continue == 'true'
      env:
        ESPN_S2: ${{ secrets.ESPN_S2 }}
        ESPN_SWID: ${{ secrets.ESPN_SWID }}
        LEAGUE_1_ID: ${{ secrets.LEAGUE_1_ID }}
        LEAGUE_1_TEAM_ID: ${{ secrets.LEAGUE_1_TEAM_ID }}
        LEAGUE_1_NAME: ${{ secrets.LEAGUE_1_NAME }}
        LEAGUE_2_ID: ${{ secrets.LEAGUE_2_ID }}
        LEAGUE_2_TEAM_ID: ${{ secrets.LEAGUE_2_TEAM_ID }}
        LEAGUE_2_NAME: ${{ secrets.LEAGUE_2_NAME }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        FANTASYPROS_SESSION_ID: ${{ secrets.FANTASYPROS_SESSION_ID }}
      run: |
        cd fantasy-poc/automation
        echo "üß™ Running integration tests..."
        
        # Run ESPN integration tests
        echo "Testing ESPN integration..." 
        if ! npx tsx src/testing/espn-integration-test.ts > espn_test_results.txt 2>&1; then
          echo "‚ö†Ô∏è ESPN integration tests had issues"
          cat espn_test_results.txt
        else
          echo "‚úÖ ESPN integration tests passed"
        fi
        
        # Run LLM integration tests
        echo "Testing LLM integration..."
        if ! npx tsx src/testing/llm-integration-test.ts > llm_test_results.txt 2>&1; then
          echo "‚ö†Ô∏è LLM integration tests had issues"
          cat llm_test_results.txt
        else
          echo "‚úÖ LLM integration tests passed"
        fi
        
        # Store results for later use
        echo "results=passed" >> $GITHUB_OUTPUT
    
    - name: Final preflight check
      id: checks
      run: |
        if [ "${{ steps.env_check.outputs.continue }}" == "true" ]; then
          echo "‚úÖ All preflight checks passed - proceeding with automation"
          echo "continue=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Preflight checks failed - aborting automation"
          echo "continue=false" >> $GITHUB_OUTPUT
        fi

  # Main automation execution
  automation:
    needs: preflight
    if: needs.preflight.outputs.should_continue == 'true'
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'fantasy-poc/automation/package.json'
        
    - name: Install dependencies and build
      run: |
        cd fantasy-poc/shared
        npm ci --production
        npm run build
        
        cd ../automation
        npm ci --production
        npm run build
    
    # Health check (daily)
    - name: Daily Health Check
      if: github.event.schedule == '0 13 * * *' || github.event.inputs.action == 'health-check'
      env:
        ESPN_S2: ${{ secrets.ESPN_S2 }}
        ESPN_SWID: ${{ secrets.ESPN_SWID }}
        LEAGUE_1_ID: ${{ secrets.LEAGUE_1_ID }}
        LEAGUE_1_TEAM_ID: ${{ secrets.LEAGUE_1_TEAM_ID }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        cd fantasy-poc/automation
        echo "ü©∫ Running daily health check..."
        
        # Check ESPN connectivity
        node dist/cli.js roster --league $LEAGUE_1_ID --team $LEAGUE_1_TEAM_ID > health_check.json
        
        # Check cost status
        node dist/cli.js cost >> health_check.json
        
        echo "HEALTH_CHECK_RESULT<<EOF" >> $GITHUB_ENV
        cat health_check.json >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "‚úÖ Health check completed"
    
    # Thursday optimization
    - name: Thursday - AI Lineup Optimization
      if: github.event.schedule == '0 23 * * 4' || github.event.inputs.action == 'thursday'
      env:
        ESPN_S2: ${{ secrets.ESPN_S2 }}
        ESPN_SWID: ${{ secrets.ESPN_SWID }}
        LEAGUE_1_ID: ${{ secrets.LEAGUE_1_ID }}
        LEAGUE_1_TEAM_ID: ${{ secrets.LEAGUE_1_TEAM_ID }}
        LEAGUE_1_NAME: ${{ secrets.LEAGUE_1_NAME }}
        LEAGUE_2_ID: ${{ secrets.LEAGUE_2_ID }}
        LEAGUE_2_TEAM_ID: ${{ secrets.LEAGUE_2_TEAM_ID }}
        LEAGUE_2_NAME: ${{ secrets.LEAGUE_2_NAME }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        FANTASYPROS_SESSION_ID: ${{ secrets.FANTASYPROS_SESSION_ID }}
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        PRIMARY_LLM_PROVIDER: 'gemini'
        ENABLE_AB_TESTING: 'true'
        ENABLE_PERFORMANCE_TRACKING: 'true'
        DAILY_COST_LIMIT: '2.00'
      run: |
        cd fantasy-poc/automation
        echo "ü§ñ Executing Thursday AI Optimization..."
        
        # Calculate current NFL week
        SEASON_START="2025-09-04"
        CURRENT_DATE=$(date +%Y-%m-%d)
        DAYS_DIFF=$(( ($(date -d "$CURRENT_DATE" +%s) - $(date -d "$SEASON_START" +%s)) / 86400 ))
        
        if [ $DAYS_DIFF -le 0 ]; then
          WEEK=1
        else
          WEEK=$(( (DAYS_DIFF / 7) + 1 ))
          if [ $WEEK -gt 18 ]; then
            WEEK=18
          fi
        fi
        
        echo "üìÖ Processing NFL Week $WEEK"
        
        # Execute Thursday optimization
        timeout 1500s node dist/cli.js thursday --week $WEEK > thursday_output.json || {
          echo "‚ùå Thursday optimization timed out or failed"
          echo '{"success":false,"error":"Execution timeout or failure","timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > thursday_output.json
        }
        
        # Store results for notification
        echo "THURSDAY_RESULT<<EOF" >> $GITHUB_ENV
        cat thursday_output.json >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        # Check for success
        if grep -q '"success":true' thursday_output.json; then
          echo "‚úÖ Thursday optimization completed successfully"
        else
          echo "‚ö†Ô∏è Thursday optimization completed with issues"
        fi
    
    # Sunday final check
    - name: Sunday - Final Lineup Check
      if: github.event.schedule == '0 16 * * 0' || github.event.inputs.action == 'sunday'
      env:
        ESPN_S2: ${{ secrets.ESPN_S2 }}
        ESPN_SWID: ${{ secrets.ESPN_SWID }}
        LEAGUE_1_ID: ${{ secrets.LEAGUE_1_ID }}
        LEAGUE_1_TEAM_ID: ${{ secrets.LEAGUE_1_TEAM_ID }}
        LEAGUE_2_ID: ${{ secrets.LEAGUE_2_ID }}
        LEAGUE_2_TEAM_ID: ${{ secrets.LEAGUE_2_TEAM_ID }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      run: |
        cd fantasy-poc/automation
        echo "üîç Executing Sunday Final Check..."
        
        timeout 600s node dist/cli.js sunday > sunday_output.json || {
          echo "‚ùå Sunday check timed out or failed"
          echo '{"success":false,"error":"Execution timeout or failure"}' > sunday_output.json
        }
        
        echo "SUNDAY_RESULT<<EOF" >> $GITHUB_ENV
        cat sunday_output.json >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "‚úÖ Sunday check completed"
    
    # Monday analysis
    - name: Monday - Post-Game Analysis
      if: github.event.schedule == '0 23 * * 1' || github.event.inputs.action == 'monday'
      env:
        ESPN_S2: ${{ secrets.ESPN_S2 }}
        ESPN_SWID: ${{ secrets.ESPN_SWID }}
        LEAGUE_1_ID: ${{ secrets.LEAGUE_1_ID }}
        LEAGUE_1_TEAM_ID: ${{ secrets.LEAGUE_1_TEAM_ID }}
        LEAGUE_2_ID: ${{ secrets.LEAGUE_2_ID }}
        LEAGUE_2_TEAM_ID: ${{ secrets.LEAGUE_2_TEAM_ID }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        FANTASYPROS_SESSION_ID: ${{ secrets.FANTASYPROS_SESSION_ID }}
      run: |
        cd fantasy-poc/automation
        echo "üìà Executing Monday Analysis..."
        
        timeout 1200s node dist/cli.js monday > monday_output.json || {
          echo "‚ùå Monday analysis timed out or failed"
          echo '{"success":false,"error":"Execution timeout or failure"}' > monday_output.json
        }
        
        echo "MONDAY_RESULT<<EOF" >> $GITHUB_ENV
        cat monday_output.json >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "‚úÖ Monday analysis completed"
    
    # Tuesday waivers
    - name: Tuesday - Waiver Wire Analysis
      if: github.event.schedule == '0 8 * * 2' || github.event.inputs.action == 'tuesday'
      env:
        ESPN_S2: ${{ secrets.ESPN_S2 }}
        ESPN_SWID: ${{ secrets.ESPN_SWID }}
        LEAGUE_1_ID: ${{ secrets.LEAGUE_1_ID }}
        LEAGUE_1_TEAM_ID: ${{ secrets.LEAGUE_1_TEAM_ID }}
        LEAGUE_2_ID: ${{ secrets.LEAGUE_2_ID }}
        LEAGUE_2_TEAM_ID: ${{ secrets.LEAGUE_2_TEAM_ID }}
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        FANTASYPROS_SESSION_ID: ${{ secrets.FANTASYPROS_SESSION_ID }}
      run: |
        cd fantasy-poc/automation
        echo "üéØ Executing Tuesday Waiver Analysis..."
        
        timeout 1200s node dist/cli.js tuesday > tuesday_output.json || {
          echo "‚ùå Tuesday waiver analysis timed out or failed"
          echo '{"success":false,"error":"Execution timeout or failure"}' > tuesday_output.json
        }
        
        echo "TUESDAY_RESULT<<EOF" >> $GITHUB_ENV
        cat tuesday_output.json >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV
        
        echo "‚úÖ Tuesday waiver analysis completed"

  # Notifications and monitoring
  notify:
    needs: [preflight, automation]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Send Discord Notification
      if: always()
      env:
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        PREFLIGHT_STATUS: ${{ needs.preflight.result }}
        AUTOMATION_STATUS: ${{ needs.automation.result }}
      run: |
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          # Determine overall status
          if [ "$PREFLIGHT_STATUS" == "success" ] && [ "$AUTOMATION_STATUS" == "success" ]; then
            STATUS="success"
            COLOR="3066993"
            EMOJI="‚úÖ"
          elif [ "$PREFLIGHT_STATUS" == "failure" ]; then
            STATUS="preflight_failed"
            COLOR="15158332"
            EMOJI="üö´"
          else
            STATUS="automation_issues"
            COLOR="16776960"
            EMOJI="‚ö†Ô∏è"
          fi
          
          # Determine action type
          if [ -n "${THURSDAY_RESULT:-}" ]; then
            ACTION_TYPE="ü§ñ Thursday AI Optimization"
          elif [ -n "${SUNDAY_RESULT:-}" ]; then
            ACTION_TYPE="üîç Sunday Final Check"
          elif [ -n "${MONDAY_RESULT:-}" ]; then
            ACTION_TYPE="üìà Monday Analysis"
          elif [ -n "${TUESDAY_RESULT:-}" ]; then
            ACTION_TYPE="üéØ Tuesday Waiver Analysis"
          elif [ -n "${HEALTH_CHECK_RESULT:-}" ]; then
            ACTION_TYPE="ü©∫ Daily Health Check"
          else
            ACTION_TYPE="üõ†Ô∏è Manual Operation"
          fi
          
          # Create Discord message
          MESSAGE="{
            \"embeds\": [{
              \"title\": \"$EMOJI Fantasy Football Production Automation\",
              \"description\": \"**$ACTION_TYPE**\\n\\n**Status**: $STATUS\\n**Environment**: Production\\n**Execution**: Direct CLI (Phase 3)\",
              \"color\": $COLOR,
              \"fields\": [
                {\"name\": \"üîç Preflight\", \"value\": \"$PREFLIGHT_STATUS\", \"inline\": true},
                {\"name\": \"ü§ñ Automation\", \"value\": \"$AUTOMATION_STATUS\", \"inline\": true},
                {\"name\": \"üìÖ Timestamp\", \"value\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\", \"inline\": true}
              ],
              \"footer\": {\"text\": \"Phase 3: Production Deployment with Monitoring\"}
            }]
          }"
          
          curl -H "Content-Type: application/json" -d "$MESSAGE" "$DISCORD_WEBHOOK_URL"
          echo "‚úÖ Discord notification sent"
        else
          echo "‚ö†Ô∏è No Discord webhook configured"
        fi
    
    - name: Create Issue on Failure
      if: failure() && github.event_name == 'schedule'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `‚ö†Ô∏è Fantasy Automation Failure - ${new Date().toISOString().split('T')[0]}`,
            body: `## Production Automation Failure
            
            **Workflow**: ${context.workflow}
            **Run ID**: ${context.runId}
            **Trigger**: ${context.eventName}
            **Time**: ${new Date().toISOString()}
            
            ### Status
            - Preflight: ${{ needs.preflight.result }}
            - Automation: ${{ needs.automation.result }}
            
            ### Action Required
            1. Check workflow logs: https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}
            2. Verify ESPN authentication and API keys
            3. Check LLM provider status and quotas
            4. Review error messages and system health
            
            This issue was automatically created by the production automation workflow.`,
            labels: ['automation', 'production', 'bug']
          })

  # Upload results and artifacts
  cleanup:
    needs: [preflight, automation, notify]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Upload Production Results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: fantasy-production-results-${{ github.run_number }}
        path: |
          fantasy-poc/automation/*_results.json
          fantasy-poc/automation/*_output.json
          fantasy-poc/automation/*_test_results.txt
        retention-days: 30