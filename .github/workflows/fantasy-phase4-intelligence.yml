name: Fantasy Football Phase 4 - Advanced Intelligence

on:
  # Scheduled runs for comprehensive intelligence
  schedule:
    # Advanced Intelligence Analysis - Daily at 8 AM ET
    - cron: '0 13 * * *'
    # Real-time monitoring - Every hour during game days (Sunday/Monday/Thursday)
    - cron: '0 * * * 0,1,4'
    # Weekly comprehensive analysis - Saturday 10 PM ET
    - cron: '0 3 * * 6'
    # Emergency monitoring - Every 15 minutes during evening (6-11 PM ET on game days)
    - cron: '*/15 23 * * 0,1,4'
    # Emergency monitoring - Every 15 minutes during night (11 PM-midnight ET on game days)
    - cron: '*/15 0-4 * * 0,1,4'
  
  # Manual triggers
  workflow_dispatch:
    inputs:
      intelligence_mode:
        description: 'Intelligence mode to run'
        required: true
        default: 'full'
        type: choice
        options:
          - full
          - realtime
          - learning
          - analytics
          - seasonal
          - emergency
      week:
        description: 'NFL Week Number'
        required: false
        default: '1'
      force_execution:
        description: 'Force execution even if conditions not met'
        required: false
        default: false
        type: boolean

env:
  NODE_ENV: production
  ENABLE_PERFORMANCE_TRACKING: 'true'
  ENABLE_AB_TESTING: 'true'
  ENABLE_CROSS_LEAGUE: 'true'

jobs:
  # Preflight checks for all Phase 4 operations
  preflight-intelligence:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_run: ${{ steps.check.outputs.should_run }}
      intelligence_mode: ${{ steps.check.outputs.intelligence_mode }}
      current_week: ${{ steps.check.outputs.current_week }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'fantasy-poc/automation/package-lock.json'

      - name: Install Dependencies
        working-directory: fantasy-poc/automation
        run: |
          npm ci
          npm run build

      - name: Intelligence Preflight Check
        id: check
        working-directory: fantasy-poc/automation
        env:
          ESPN_S2: ${{ secrets.ESPN_S2 }}
          ESPN_SWID: ${{ secrets.ESPN_SWID }}
          LEAGUE_1_ID: ${{ secrets.LEAGUE_1_ID }}
          LEAGUE_1_TEAM_ID: ${{ secrets.LEAGUE_1_TEAM_ID }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          PRIMARY_LLM_PROVIDER: ${{ vars.PRIMARY_LLM_PROVIDER || 'gemini' }}
        run: |
          echo "üß† Phase 4 Intelligence Preflight Check"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Intelligence Mode: ${{ github.event.inputs.intelligence_mode || 'auto' }}"
          
          # Determine intelligence mode based on trigger
          if [[ "${{ github.event.inputs.intelligence_mode }}" != "" ]]; then
            INTEL_MODE="${{ github.event.inputs.intelligence_mode }}"
          elif [[ "${{ github.event.schedule }}" == "0 13 * * *" ]]; then
            INTEL_MODE="full"
          elif [[ "${{ github.event.schedule }}" == "0 * * * 0,1,4" ]]; then
            INTEL_MODE="realtime"
          elif [[ "${{ github.event.schedule }}" == "0 3 * * 6" ]]; then
            INTEL_MODE="analytics"
          elif [[ "${{ github.event.schedule }}" == "*/15 23-04 * * 0,1,4" ]]; then
            INTEL_MODE="emergency"
          else
            INTEL_MODE="full"
          fi
          
          echo "intelligence_mode=$INTEL_MODE" >> $GITHUB_OUTPUT
          
          # Calculate current NFL week
          CURRENT_WEEK=$(node -e "
            const now = new Date();
            const seasonStart = new Date(now.getFullYear(), 8, 1);
            const weeksSinceStart = Math.floor((now.getTime() - seasonStart.getTime()) / (7 * 24 * 60 * 60 * 1000));
            console.log(Math.max(1, Math.min(18, weeksSinceStart + 1)));
          ")
          echo "current_week=$CURRENT_WEEK" >> $GITHUB_OUTPUT
          
          # Initialize environment and validate configuration
          npm run cli init
          
          # Check if we should run based on schedule and conditions
          SHOULD_RUN="true"
          
          # Skip emergency mode during off-season
          if [[ "$INTEL_MODE" == "emergency" && $CURRENT_WEEK -lt 1 ]]; then
            echo "‚è≠Ô∏è Skipping emergency intelligence during off-season"
            SHOULD_RUN="false"
          fi
          
          # Force execution override
          if [[ "${{ github.event.inputs.force_execution }}" == "true" ]]; then
            echo "üöÄ Force execution enabled"
            SHOULD_RUN="true"
          fi
          
          echo "should_run=$SHOULD_RUN" >> $GITHUB_OUTPUT
          echo "‚úÖ Preflight check complete: mode=$INTEL_MODE, week=$CURRENT_WEEK, run=$SHOULD_RUN"

  # Phase 4 Advanced Intelligence Execution
  advanced-intelligence:
    runs-on: ubuntu-latest
    needs: preflight-intelligence
    if: needs.preflight-intelligence.outputs.should_run == 'true'
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        # Run different intelligence modes in parallel when appropriate
        include:
          - mode: ${{ needs.preflight-intelligence.outputs.intelligence_mode }}
            primary: true
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'fantasy-poc/automation/package-lock.json'

      - name: Install Dependencies
        working-directory: fantasy-poc/automation
        run: |
          npm ci
          npm run build

      - name: Load Historical Intelligence Data
        working-directory: fantasy-poc/automation
        run: |
          echo "üìä Loading historical intelligence data..."
          # In production, this would restore from persistent storage
          # For now, create minimal structure for testing
          echo '{"patterns": [], "last_updated": "'$(date -Iseconds)'"}' > learning_patterns.json
          echo '{"current_season": 2025, "historical_data": []}' > seasonal_intelligence.json
          echo '[]' > decision_history.json

      - name: Execute Phase 4 Intelligence
        id: intelligence
        working-directory: fantasy-poc/automation
        timeout-minutes: 20
        env:
          # ESPN Authentication
          ESPN_S2: ${{ secrets.ESPN_S2 }}
          ESPN_SWID: ${{ secrets.ESPN_SWID }}
          
          # League Configuration
          LEAGUE_1_ID: ${{ secrets.LEAGUE_1_ID }}
          LEAGUE_1_TEAM_ID: ${{ secrets.LEAGUE_1_TEAM_ID }}
          LEAGUE_1_NAME: ${{ secrets.LEAGUE_1_NAME || 'Main League' }}
          LEAGUE_2_ID: ${{ secrets.LEAGUE_2_ID }}
          LEAGUE_2_TEAM_ID: ${{ secrets.LEAGUE_2_TEAM_ID }}
          LEAGUE_2_NAME: ${{ secrets.LEAGUE_2_NAME || 'Secondary League' }}
          
          # LLM Configuration
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY }}
          PRIMARY_LLM_PROVIDER: ${{ vars.PRIMARY_LLM_PROVIDER || 'gemini' }}
          FALLBACK_LLM_PROVIDER: ${{ vars.FALLBACK_LLM_PROVIDER || 'claude' }}
          
          # Cost Limits
          DAILY_COST_LIMIT: ${{ vars.DAILY_COST_LIMIT || '3.00' }}
          WEEKLY_COST_LIMIT: ${{ vars.WEEKLY_COST_LIMIT || '15.00' }}
          MONTHLY_COST_LIMIT: ${{ vars.MONTHLY_COST_LIMIT || '50.00' }}
          
          # Feature Flags
          ENABLE_FANTASYPROS: ${{ vars.ENABLE_FANTASYPROS || 'false' }}
          ENABLE_WEATHER: ${{ vars.ENABLE_WEATHER || 'false' }}
          ENABLE_NEWS: ${{ vars.ENABLE_NEWS || 'false' }}
          
          # Notification Configuration
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
          # Advanced Intelligence Configuration
          FANTASYPROS_SESSION_ID: ${{ secrets.FANTASYPROS_SESSION_ID }}
          OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
          NEWS_API_KEY: ${{ secrets.NEWS_API_KEY }}
        run: |
          echo "üß† Executing Phase 4 Advanced Intelligence"
          echo "Mode: ${{ matrix.mode }}"
          echo "Week: ${{ needs.preflight-intelligence.outputs.current_week }}"
          
          # Execute intelligence based on mode
          case "${{ matrix.mode }}" in
            "full")
              echo "üöÄ Running full advanced intelligence analysis..."
              npm run cli intelligence --mode full --week ${{ needs.preflight-intelligence.outputs.current_week }}
              ;;
            "realtime")
              echo "‚ö° Running real-time intelligence monitoring..."
              npm run cli realtime
              ;;
            "learning")
              echo "üß† Running adaptive learning cycle..."
              npm run cli learning
              ;;
            "analytics")
              echo "üìä Generating advanced analytics dashboard..."
              npm run cli analytics
              ;;
            "seasonal")
              echo "üîÆ Processing multi-season intelligence..."
              npm run cli seasonal
              ;;
            "emergency")
              echo "üö® Activating emergency intelligence protocols..."
              npm run cli emergency
              ;;
            *)
              echo "‚ùì Unknown mode: ${{ matrix.mode }}, defaulting to full analysis"
              npm run cli intelligence --mode full --week ${{ needs.preflight-intelligence.outputs.current_week }}
              ;;
          esac
          
          echo "‚úÖ Phase 4 Intelligence execution complete"

      - name: Validate Intelligence Results
        working-directory: fantasy-poc/automation
        run: |
          echo "üîç Validating intelligence results..."
          
          # Check for critical output files
          if [[ "${{ matrix.mode }}" == "full" || "${{ matrix.mode }}" == "analytics" ]]; then
            if [[ -f "phase4_results.json" ]]; then
              echo "‚úÖ Phase 4 results file generated"
              cat phase4_results.json | jq '.intelligence_summary'
            else
              echo "‚ö†Ô∏è Phase 4 results file missing"
            fi
          fi
          
          if [[ "${{ matrix.mode }}" == "realtime" || "${{ matrix.mode }}" == "emergency" ]]; then
            if [[ -f "urgent_decisions.json" ]]; then
              echo "‚úÖ Urgent decisions file generated"
              cat urgent_decisions.json | jq 'length'
            fi
          fi
          
          if [[ "${{ matrix.mode }}" == "learning" ]]; then
            if [[ -f "learning_patterns.json" ]]; then
              echo "‚úÖ Learning patterns updated"
              cat learning_patterns.json | jq '.metrics'
            fi
          fi
          
          if [[ "${{ matrix.mode }}" == "analytics" ]]; then
            if [[ -f "analytics_dashboard.json" ]]; then
              echo "‚úÖ Analytics dashboard generated"
              cat analytics_dashboard.json | jq '.summary.overall_grade'
            fi
          fi

      - name: Upload Intelligence Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: phase4-intelligence-results-${{ matrix.mode }}-${{ github.run_number }}
          path: |
            fantasy-poc/automation/phase4_results.json
            fantasy-poc/automation/urgent_decisions.json
            fantasy-poc/automation/learning_patterns.json
            fantasy-poc/automation/seasonal_intelligence.json
            fantasy-poc/automation/analytics_dashboard.json
            fantasy-poc/automation/analytics_dashboard_*.html
            fantasy-poc/automation/system-metrics.json
            fantasy-poc/automation/health-report.txt
          retention-days: 30

      - name: Store Intelligence Data
        if: matrix.primary == true
        working-directory: fantasy-poc/automation
        run: |
          echo "üíæ Storing intelligence data for future analysis..."
          
          # In production, this would save to persistent database
          # For now, demonstrate data structure
          if [[ -f "phase4_results.json" ]]; then
            echo "Storing Phase 4 results..."
            mkdir -p ../shared/data/intelligence
            cp phase4_results.json "../shared/data/intelligence/phase4_$(date +%Y%m%d_%H%M%S).json"
          fi

  # Advanced notification system for Phase 4 results
  intelligent-notifications:
    runs-on: ubuntu-latest
    needs: [preflight-intelligence, advanced-intelligence]
    if: always() && needs.preflight-intelligence.outputs.should_run == 'true'
    timeout-minutes: 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Download Intelligence Results
        uses: actions/download-artifact@v4
        with:
          pattern: phase4-intelligence-results-*
          merge-multiple: true
          path: ./results

      - name: Send Intelligent Notifications
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          echo "üì¢ Sending Phase 4 intelligence notifications..."
          
          # Determine notification level based on results
          MODE="${{ needs.preflight-intelligence.outputs.intelligence_mode }}"
          WEEK="${{ needs.preflight-intelligence.outputs.current_week }}"
          
          if [[ "${{ needs.advanced-intelligence.result }}" == "success" ]]; then
            STATUS="‚úÖ SUCCESS"
            COLOR="3066993"  # Green
          elif [[ "${{ needs.advanced-intelligence.result }}" == "failure" ]]; then
            STATUS="‚ùå FAILED"
            COLOR="15158332"  # Red
          else
            STATUS="‚ö†Ô∏è PARTIAL"
            COLOR="16776960"  # Yellow
          fi
          
          # Extract key insights if available
          INSIGHTS=""
          if [[ -f "results/phase4_results.json" ]]; then
            INSIGHTS=$(cat results/phase4_results.json | jq -r '.key_insights[0:3][]' 2>/dev/null | head -3 || echo "Analysis complete")
          fi
          
          # Send Discord notification
          if [[ -n "$DISCORD_WEBHOOK_URL" ]]; then
            curl -X POST "$DISCORD_WEBHOOK_URL" \
              -H "Content-Type: application/json" \
              -d "{
                \"embeds\": [{
                  \"title\": \"üß† Phase 4 Advanced Intelligence - $STATUS\",
                  \"description\": \"**Mode**: $MODE\\n**Week**: $WEEK\\n**Time**: $(date)\\n\\n**Key Insights**:\\n$INSIGHTS\",
                  \"color\": $COLOR,
                  \"fields\": [
                    {\"name\": \"üéØ Intelligence Mode\", \"value\": \"$MODE\", \"inline\": true},
                    {\"name\": \"üìÖ NFL Week\", \"value\": \"$WEEK\", \"inline\": true},
                    {\"name\": \"üìä Status\", \"value\": \"$STATUS\", \"inline\": true}
                  ],
                  \"footer\": {\"text\": \"Fantasy AI Phase 4 Advanced Intelligence\"},
                  \"timestamp\": \"$(date -Iseconds)\"
                }]
              }"
          fi
          
          echo "üì® Notifications sent successfully"

  # Create issues for failed intelligence operations
  create-intelligence-issue:
    runs-on: ubuntu-latest
    needs: [preflight-intelligence, advanced-intelligence]
    if: always() && needs.advanced-intelligence.result == 'failure' && needs.preflight-intelligence.outputs.should_run == 'true'
    timeout-minutes: 5
    steps:
      - name: Create Intelligence Failure Issue
        uses: actions/github-script@v7
        with:
          script: |
            const mode = '${{ needs.preflight-intelligence.outputs.intelligence_mode }}';
            const week = '${{ needs.preflight-intelligence.outputs.current_week }}';
            const runUrl = `https://github.com/` + context.repo.owner + `/` + context.repo.repo + `/actions/runs/` + context.runId;
            
            const title = 'üß† Phase 4 Intelligence Failure - ' + mode.toUpperCase() + ' Mode (Week ' + week + ')';
            const body = '## üö® Phase 4 Advanced Intelligence Failure\n\n' +
              '**Intelligence Mode**: ' + mode + '\n' +
              '**NFL Week**: ' + week + '\n' +
              '**Execution Time**: ' + new Date().toISOString() + '\n' +
              '**Workflow Run**: [' + context.runId + '](' + runUrl + ')\n\n' +
              '### Failure Details\n' +
              'The Phase 4 advanced intelligence system encountered a failure during execution.\n\n' +
              '### Troubleshooting Steps\n' +
              '1. **Check LLM API Keys**: Verify all configured LLM providers are accessible\n' +
              '2. **Validate ESPN Cookies**: Ensure ESPN_S2 and ESPN_SWID are current\n' +
              '3. **Review Cost Limits**: Check if daily/weekly cost limits were exceeded\n' +
              '4. **Intelligence Data**: Verify intelligence data files are accessible\n' +
              '5. **Network Connectivity**: Ensure external API access is available\n\n' +
              '### Intelligence Components\n' +
              '- **Real-time Engine**: Event monitoring and instant decisions\n' +
              '- **Adaptive Learning**: Pattern recognition and strategy evolution\n' +
              '- **Analytics Engine**: Performance analysis and insights\n' +
              '- **Seasonal Intelligence**: Multi-season pattern analysis\n\n' +
              '### Next Actions\n' +
              '- [ ] Review workflow logs for specific error details\n' +
              '- [ ] Test individual intelligence components\n' +
              '- [ ] Verify all required environment variables\n' +
              '- [ ] Check intelligence data consistency\n' +
              '- [ ] Run manual intelligence validation\n\n' +
              '**Auto-created by Phase 4 Intelligence Workflow**';
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['phase-4', 'intelligence', 'automation', 'bug']
            });